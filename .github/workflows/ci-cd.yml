name: CI/CD Pipeline - ACER Music

on:
  push:
    branches: [ main, develop, test ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Job de v√©rification rapide
  test:
    name: Tests Rapides
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Installation des d√©pendances
        run: npm ci

      - name: V√©rification des types TypeScript
        run: npm run type-check

      - name: Tests unitaires
        run: npm run test

      - name: Configuration de la base de donn√©es
        run: |
          npm run db:generate
          npm run db:push
          npm run db:seed
          echo "‚úÖ Base de donn√©es configur√©e avec succ√®s"

  # Job de d√©ploiement en staging
  deploy-staging:
    name: D√©ploiement Staging
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: D√©ploiement sur Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Job de d√©ploiement en production
  deploy-production:
    name: D√©ploiement Production
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: D√©ploiement sur Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Notification de d√©ploiement
        run: |
          echo "üöÄ D√©ploiement en production termin√©!"
          echo "URL: ${{ secrets.PRODUCTION_URL }}"
          echo "Commit: ${{ github.sha }}"
          echo "Auteur: ${{ github.actor }}"

  # Job de notification
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [test, deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notification Slack (Succ√®s)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: '‚úÖ Pipeline ACER Music r√©ussie!'

      - name: Notification Slack (√âchec)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: '‚ùå Pipeline ACER Music √©chou√©e!'
