name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
  pull_request_target:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Vérifications de code
  code-quality:
    name: Qualité du Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Installation des dépendances
        run: npm ci

      - name: Vérification ESLint
        run: npm run lint

      - name: Vérification Prettier
        run: npx prettier --check .

      - name: Vérification TypeScript
        run: npm run type-check

      - name: Vérification des imports
        run: npx import-sort --check .

  # Tests automatisés
  tests:
    name: Tests Automatisés
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Installation des dépendances
        run: npm ci

      - name: Tests unitaires
        run: npm run test

      - name: Tests d'intégration
        run: npm run test:integration

      - name: Couverture de code
        run: npm run test:coverage

      - name: Upload de la couverture
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Vérifications de sécurité
  security:
    name: Sécurité
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Installation des dépendances
        run: npm ci

      - name: Audit de sécurité npm
        run: npm audit --audit-level moderate

      - name: Scan des vulnérabilités
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Scan des secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha }}

  # Build et vérifications
  build:
    name: Build et Vérifications
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Installation des dépendances
        run: npm ci

      - name: Build de l'application
        run: npm run build

      - name: Vérification de la taille du bundle
        run: |
          # Vérifier la taille du build
          BUILD_SIZE=$(du -sh .next | cut -f1)
          echo "Taille du build: $BUILD_SIZE"
          
          # Avertir si le build est trop gros
          if [ "$BUILD_SIZE" > "50M" ]; then
            echo "⚠️  Le build semble volumineux"
          fi

  # Tests de base de données
  database:
    name: Tests Base de Données
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Installation des dépendances
        run: npm ci

      - name: Génération du client Prisma
        run: npm run db:generate

      - name: Migration de la base de données
        run: npm run db:push

      - name: Tests des scripts de base de données
        run: |
          node scripts/test-event-repertoire.js
          node scripts/test-repertoire-apis.js
          node scripts/test-admin-availability.js
          node scripts/test-admin-apis-server.js

  # Vérifications de performance
  performance:
    name: Vérifications Performance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Installation des dépendances
        run: npm ci

      - name: Build de l'application
        run: npm run build

      - name: Analyse de performance
        run: |
          # Vérifier les imports non utilisés
          npx unimported
          
          # Vérifier les dépendances
          npx depcheck

  # Commentaire sur la PR
  pr-comment:
    name: Commentaire PR
    runs-on: ubuntu-latest
    needs: [code-quality, tests, security, build, database, performance]
    if: always()

    steps:
      - name: Commentaire de résumé
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Résumé de la PR')
            );

            const summary = `
            ## Résumé de la PR

            ### ✅ Vérifications réussies
            ${needs.code-quality.result === 'success' ? '- ✅ Qualité du code' : '- ❌ Qualité du code'}
            ${needs.tests.result === 'success' ? '- ✅ Tests automatisés' : '- ❌ Tests automatisés'}
            ${needs.security.result === 'success' ? '- ✅ Sécurité' : '- ❌ Sécurité'}
            ${needs.build.result === 'success' ? '- ✅ Build' : '- ❌ Build'}
            ${needs.database.result === 'success' ? '- ✅ Base de données' : '- ❌ Base de données'}
            ${needs.performance.result === 'success' ? '- ✅ Performance' : '- ❌ Performance'}

            ### 📊 Métriques
            - **Taille du build**: ${needs.build.result === 'success' ? '✅ OK' : '❌ Échec'}
            - **Couverture de tests**: ${needs.tests.result === 'success' ? '✅ OK' : '❌ Échec'}
            - **Vulnérabilités**: ${needs.security.result === 'success' ? '✅ Aucune' : '❌ Détectées'}

            ### 🚀 Prêt pour le merge
            ${needs.code-quality.result === 'success' && 
              needs.tests.result === 'success' && 
              needs.security.result === 'success' && 
              needs.build.result === 'success' ? 
              '✅ **Cette PR est prête pour le merge!**' : 
              '❌ **Cette PR nécessite des corrections avant le merge.**'
            }
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
