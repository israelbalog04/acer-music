const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkAdminAccount() {
  try {
    console.log('üîç V√©rification du compte admin balogisrael02@gmail.com...\n');

    // Rechercher le compte
    const user = await prisma.user.findUnique({
      where: { email: 'balogisrael02@gmail.com' },
      include: {
        church: {
          select: {
            name: true,
            city: true
          }
        }
      }
    });

    if (!user) {
      console.log('‚ùå Compte non trouv√©');
      console.log('\nüìã Solutions possibles :');
      console.log('1. V√©rifier l\'email (balogisrael02@gmail.com)');
      console.log('2. Cr√©er le compte admin avec : npm run create-admin');
      console.log('3. Ou s\'inscrire via /auth/register avec le r√¥le Admin');
      return;
    }

    console.log('‚úÖ Compte trouv√© !');
    console.log('\nüìä Informations du compte :');
    console.log(`   üë§ Nom : ${user.firstName} ${user.lastName}`);
    console.log(`   üìß Email : ${user.email}`);
    console.log(`   üèõÔ∏è √âglise : ${user.church?.name} (${user.church?.city})`);
    console.log(`   üëë R√¥le : ${user.role}`);
    console.log(`   ‚úÖ Approuv√© : ${user.isApproved ? 'OUI' : 'NON'}`);
    console.log(`   üìÖ Cr√©√© le : ${user.createdAt.toLocaleDateString('fr-FR')}`);
    
    if (user.approvedAt) {
      console.log(`   ‚úÖ Approuv√© le : ${user.approvedAt.toLocaleDateString('fr-FR')}`);
    }
    
    if (user.approvedBy) {
      console.log(`   üë§ Approuv√© par : ${user.approvedBy}`);
    }

    // V√©rifier les probl√®mes potentiels
    console.log('\nüîç Diagnostic :');
    
    if (!user.isApproved) {
      console.log('‚ùå PROBL√àME : Compte non approuv√©');
      console.log('   Solution : Approuver le compte via l\'interface admin');
    } else {
      console.log('‚úÖ Compte approuv√©');
    }

    if (!user.password) {
      console.log('‚ùå PROBL√àME : Pas de mot de passe');
      console.log('   Solution : R√©initialiser le mot de passe');
    } else {
      console.log('‚úÖ Mot de passe configur√©');
    }

    if (user.role !== 'ADMIN') {
      console.log('‚ùå PROBL√àME : R√¥le non admin');
      console.log(`   R√¥le actuel : ${user.role}`);
      console.log('   Solution : Changer le r√¥le en ADMIN');
    } else {
      console.log('‚úÖ R√¥le admin correct');
    }

    // Lister tous les admins de la m√™me √©glise
    console.log('\nüë• Autres admins de la m√™me √©glise :');
    const otherAdmins = await prisma.user.findMany({
      where: {
        churchId: user.churchId,
        role: 'ADMIN',
        email: { not: 'balogisrael02@gmail.com' }
      },
      select: {
        email: true,
        firstName: true,
        lastName: true,
        isApproved: true
      }
    });

    if (otherAdmins.length === 0) {
      console.log('   Aucun autre admin trouv√©');
    } else {
      otherAdmins.forEach(admin => {
        console.log(`   - ${admin.email} (${admin.firstName} ${admin.lastName}) - ${admin.isApproved ? 'Approuv√©' : 'Non approuv√©'}`);
      });
    }

    // Suggestions de r√©solution
    console.log('\nüõ†Ô∏è Solutions recommand√©es :');
    
    if (!user.isApproved) {
      console.log('1. Se connecter avec un autre admin pour approuver ce compte');
      console.log('2. Ou utiliser un compte admin de test :');
      console.log('   - admin@acer-paris.com (password)');
      console.log('   - admin@acer-lyon.com (password)');
    }
    
    if (!user.password) {
      console.log('3. R√©initialiser le mot de passe via l\'interface admin');
    }

    console.log('\n4. V√©rifier que le mot de passe est correct');
    console.log('5. Essayer de se connecter sur /auth/login');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification :', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkAdminAccount();
