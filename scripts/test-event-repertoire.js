const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testEventRepertoire() {
  console.log('üîç Test de la fonctionnalit√© de r√©pertoire d\'√©v√©nement...\n');

  try {
    // 1. V√©rifier qu'il y a des √©v√©nements
    console.log('1. V√©rification des √©v√©nements...');
    const events = await prisma.schedule.findMany({
      where: { isActive: true },
      select: { id: true, title: true, date: true, type: true },
      take: 3
    });

    if (events.length === 0) {
      console.log('‚ùå Aucun √©v√©nement trouv√©');
      return;
    }

    console.log(`‚úÖ ${events.length} √©v√©nement(s) trouv√©(s):`);
    events.forEach(event => {
      console.log(`   - ${event.title} (${event.date.toISOString().split('T')[0]}) - ${event.type}`);
    });

    // 2. V√©rifier qu'il y a des chansons
    console.log('\n2. V√©rification des chansons...');
    const songs = await prisma.song.findMany({
      where: { isActive: true },
      select: { id: true, title: true, artist: true, key: true, bpm: true },
      take: 5
    });

    console.log(`‚úÖ ${songs.length} chanson(s) trouv√©e(s):`);
    songs.forEach(song => {
      console.log(`   - ${song.title} par ${song.artist || 'Inconnu'} (Cl√©: ${song.key || 'N/A'}, BPM: ${song.bpm || 'N/A'})`);
    });

    // 3. V√©rifier les relations EventSong existantes
    console.log('\n3. V√©rification des relations EventSong...');
    const eventSongs = await prisma.eventSong.findMany({
      include: {
        song: { select: { title: true } },
        schedule: { select: { title: true } }
      },
      take: 5
    });

    console.log(`‚úÖ ${eventSongs.length} relation(s) EventSong trouv√©e(s):`);
    eventSongs.forEach(es => {
      console.log(`   - "${es.song.title}" dans "${es.schedule.title}" (Ordre: ${es.order || 'N/A'})`);
    });

    // 4. Test de simulation d'ajout de chansons
    console.log('\n4. Test de simulation d\'ajout de chansons...');
    const testEvent = events[0];
    const testSongs = songs.slice(0, 2);

    console.log(`   Simulation d'ajout de ${testSongs.length} chanson(s) √† l'√©v√©nement "${testEvent.title}"`);

    // V√©rifier l'ordre actuel
    const currentMaxOrder = await prisma.eventSong.aggregate({
      where: { scheduleId: testEvent.id },
      _max: { order: true }
    });

    const nextOrder = (currentMaxOrder._max?.order || 0) + 1;
    console.log(`   Prochain ordre disponible: ${nextOrder}`);

    // 5. V√©rifier les permissions
    console.log('\n5. V√©rification des permissions...');
    const adminUsers = await prisma.user.findMany({
      where: { 
        OR: [
          { role: 'ADMIN' },
          { role: 'CHEF_LOUANGE' }
        ]
      },
      select: { id: true, email: true, role: true, churchId: true },
      take: 3
    });

    console.log(`‚úÖ ${adminUsers.length} utilisateur(s) avec permissions trouv√©(s):`);
    adminUsers.forEach(user => {
      console.log(`   - ${user.email} (${user.role}) - √âglise: ${user.churchId}`);
    });

    // 6. V√©rifier la structure des donn√©es
    console.log('\n6. V√©rification de la structure des donn√©es...');
    
    // V√©rifier que les chansons appartiennent √† la m√™me √©glise que l'√©v√©nement
    const eventWithChurch = await prisma.schedule.findUnique({
      where: { id: testEvent.id },
      select: { churchId: true }
    });

    const songsInSameChurch = await prisma.song.count({
      where: { 
        churchId: eventWithChurch.churchId,
        isActive: true
      }
    });

    console.log(`‚úÖ ${songsInSameChurch} chanson(s) disponible(s) dans la m√™me √©glise`);

    // 7. Recommandations
    console.log('\n7. Recommandations...');
    
    if (songs.length === 0) {
      console.log('‚ö†Ô∏è  Aucune chanson trouv√©e. Cr√©ez des chansons pour tester le r√©pertoire.');
    }
    
    if (eventSongs.length === 0) {
      console.log('‚ö†Ô∏è  Aucune relation EventSong trouv√©e. Les √©v√©nements n\'ont pas encore de chansons.');
    }
    
    if (adminUsers.length === 0) {
      console.log('‚ö†Ô∏è  Aucun utilisateur ADMIN/CHEF_LOUANGE trouv√©. Cr√©ez des utilisateurs avec ces r√¥les.');
    }

    console.log('\n‚úÖ Test termin√© avec succ√®s');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testEventRepertoire();
