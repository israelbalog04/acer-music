const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function finalCleanup() {
  try {
    console.log('üßπ NETTOYAGE FINAL DE TOUTES LES DONN√âES DE TEST\n');

    // 1. Supprimer tous les utilisateurs qui ne sont pas les 3 comptes officiels ACER Paris
    const officialEmails = [
      'admin@acerparis.fr',
      'responsable@acerparis.fr', 
      'musicien@acerparis.fr'
    ];

    console.log('üë• Suppression des utilisateurs de test...');
    const deletedUsers = await prisma.user.deleteMany({
      where: {
        email: {
          notIn: officialEmails
        }
      }
    });
    console.log(`   ‚úÖ ${deletedUsers.count} utilisateur(s) de test supprim√©(s)\n`);

    // 2. Supprimer toutes les chansons de test
    console.log('üéµ Suppression des chansons de test...');
    const deletedSongs = await prisma.song.deleteMany({});
    console.log(`   ‚úÖ ${deletedSongs.count} chanson(s) de test supprim√©e(s)\n`);

    // 3. Supprimer tous les √©v√©nements/horaires de test
    console.log('üìÖ Suppression des √©v√©nements de test...');
    const deletedSchedules = await prisma.schedule.deleteMany({});
    console.log(`   ‚úÖ ${deletedSchedules.count} √©v√©nement(s) de test supprim√©(s)\n`);

    // 4. Supprimer toutes les disponibilit√©s de test
    console.log('‚úÖ Suppression des disponibilit√©s de test...');
    const deletedAvailabilities = await prisma.availability.deleteMany({});
    console.log(`   ‚úÖ ${deletedAvailabilities.count} disponibilit√©(s) de test supprim√©e(s)\n`);

    // 5. Supprimer toutes les s√©quences de test
    console.log('üéº Suppression des s√©quences de test...');
    const deletedSequences = await prisma.sequence.deleteMany({});
    console.log(`   ‚úÖ ${deletedSequences.count} s√©quence(s) de test supprim√©e(s)\n`);

    // 6. Supprimer tous les enregistrements de test
    console.log('üéôÔ∏è  Suppression des enregistrements de test...');
    const deletedRecordings = await prisma.recording.deleteMany({});
    console.log(`   ‚úÖ ${deletedRecordings.count} enregistrement(s) de test supprim√©(s)\n`);

    // 7. Supprimer toutes les √©quipes de test
    console.log('üë• Suppression des √©quipes de test...');
    const deletedTeams = await prisma.team.deleteMany({});
    console.log(`   ‚úÖ ${deletedTeams.count} √©quipe(s) de test supprim√©e(s)\n`);

    // 8. Supprimer tous les directeurs d'√©v√©nements de test
    console.log('‚≠ê Suppression des directeurs d\'√©v√©nements de test...');
    const deletedDirectors = await prisma.eventDirector.deleteMany({});
    console.log(`   ‚úÖ ${deletedDirectors.count} directeur(s) d'√©v√©nement supprim√©(s)\n`);

    // 9. Supprimer tous les t√©l√©chargements de s√©quences de test
    console.log('‚¨áÔ∏è  Suppression des t√©l√©chargements de test...');
    const deletedDownloads = await prisma.sequenceDownload.deleteMany({});
    console.log(`   ‚úÖ ${deletedDownloads.count} t√©l√©chargement(s) supprim√©(s)\n`);

    // 10. Nettoyer les √©glises qui ne sont pas ACER Paris
    console.log('üèõÔ∏è  Suppression des √©glises de test...');
    const deletedChurches = await prisma.church.deleteMany({
      where: {
        name: {
          not: 'ACER Paris'
        }
      }
    });
    console.log(`   ‚úÖ ${deletedChurches.count} √©glise(s) de test supprim√©e(s)\n`);

    // V√©rification finale
    console.log('üîç V√âRIFICATION FINALE:\n');
    
    const finalUsers = await prisma.user.findMany({
      include: { church: true }
    });
    console.log('üë• Utilisateurs restants:');
    finalUsers.forEach(user => {
      console.log(`   - ${user.firstName} ${user.lastName} (${user.email}) - ${user.role}`);
    });
    
    const finalChurches = await prisma.church.findMany();
    console.log('\nüèõÔ∏è  √âglises restantes:');
    finalChurches.forEach(church => {
      console.log(`   - ${church.name} (${church.city})`);
    });

    console.log('\n‚ú® NETTOYAGE TERMIN√â ! La base de donn√©es ne contient plus que les donn√©es de production.');

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  } finally {
    await prisma.$disconnect();
  }
}

finalCleanup();