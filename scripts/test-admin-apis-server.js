const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testAdminAPIsServer() {
  console.log('üîç Test des APIs admin c√¥t√© serveur...\n');

  try {
    // Simuler un utilisateur admin
    const adminUser = await prisma.user.findFirst({
      where: { role: 'ADMIN' },
      select: { id: true, email: true, churchId: true }
    });

    if (!adminUser) {
      console.log('‚ùå Aucun utilisateur ADMIN trouv√©');
      return;
    }

    console.log(`‚úÖ Utilisateur admin: ${adminUser.email}`);

    // Test 1: API Users (simulation)
    console.log('\n1. Test API Users...');
    const users = await prisma.user.findMany({
      where: { churchId: adminUser.churchId },
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
        role: true
      },
      orderBy: [
        { role: 'asc' },
        { firstName: 'asc' },
        { lastName: 'asc' }
      ]
    });

    console.log(`‚úÖ ${users.length} utilisateurs trouv√©s`);
    const musicians = users.filter(u => u.role === 'MUSICIEN' || u.role === 'TECHNICIEN');
    console.log(`   - ${musicians.length} musiciens/techniciens`);

    // Test 2: API Events (simulation)
    console.log('\n2. Test API Events...');
    const events = await prisma.schedule.findMany({
      where: {
        churchId: adminUser.churchId,
        isActive: true
      },
      orderBy: [
        { date: 'asc' },
        { startTime: 'asc' }
      ]
    });

    console.log(`‚úÖ ${events.length} √©v√©nements trouv√©s`);

    // Test 3: API Availability (simulation)
    console.log('\n3. Test API Availability...');
    const availabilities = await prisma.availability.findMany({
      where: {
        churchId: adminUser.churchId
      },
      include: {
        user: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true,
            role: true
          }
        },
        schedule: {
          select: {
            id: true,
            title: true,
            date: true,
            type: true,
            startTime: true,
            endTime: true
          }
        }
      },
      orderBy: [
        { user: { firstName: 'asc' } },
        { user: { lastName: 'asc' } },
        { schedule: { date: 'asc' } }
      ]
    });

    console.log(`‚úÖ ${availabilities.length} disponibilit√©s trouv√©es`);

    // Test 4: V√©rification des donn√©es
    console.log('\n4. V√©rification des donn√©es...');
    
    const usersWithAvailability = musicians.map(user => {
      const userAvailabilities = availabilities.filter(av => av.userId === user.id);
      return {
        user,
        availabilities: userAvailabilities.length
      };
    });

    console.log('Utilisateurs avec disponibilit√©s:');
    usersWithAvailability.forEach(({ user, availabilities }) => {
      console.log(`   - ${user.firstName} ${user.lastName} (${user.role}): ${availabilities} disponibilit√©s`);
    });

    // Test 5: V√©rification des permissions
    console.log('\n5. V√©rification des permissions...');
    
    // V√©rifier que l'admin peut acc√©der aux donn√©es de son √©glise
    const churchUsers = await prisma.user.count({
      where: { churchId: adminUser.churchId }
    });

    const churchEvents = await prisma.schedule.count({
      where: { churchId: adminUser.churchId }
    });

    const churchAvailabilities = await prisma.availability.count({
      where: { churchId: adminUser.churchId }
    });

    console.log(`‚úÖ L'admin a acc√®s √†:`);
    console.log(`   - ${churchUsers} utilisateurs de son √©glise`);
    console.log(`   - ${churchEvents} √©v√©nements de son √©glise`);
    console.log(`   - ${churchAvailabilities} disponibilit√©s de son √©glise`);

    console.log('\n‚úÖ Tous les tests c√¥t√© serveur r√©ussis');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAdminAPIsServer();
