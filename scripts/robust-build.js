const { execSync } = require('child_process');

async function robustBuild() {
  console.log('üöÄ Build robuste en cours...');
  
  try {
    // √âtape 1: V√©rifier les variables d'environnement critiques
    console.log('\nüìã V√©rification des variables d\'environnement...');
    const requiredEnvVars = [
      'DATABASE_URL',
      'NEXTAUTH_SECRET',
      'NEXTAUTH_URL'
    ];

    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      console.log('‚ö†Ô∏è Variables d\'environnement manquantes:', missingVars.join(', '));
      console.log('üí° Utilisation de valeurs par d√©faut pour le build...');
      
      // D√©finir des valeurs par d√©faut pour le build
      process.env.DATABASE_URL = process.env.DATABASE_URL || 'postgresql://dummy:dummy@localhost:5432/dummy';
      process.env.NEXTAUTH_SECRET = process.env.NEXTAUTH_SECRET || 'dummy-secret-for-build';
      process.env.NEXTAUTH_URL = process.env.NEXTAUTH_URL || 'http://localhost:3000';
    } else {
      console.log('‚úÖ Toutes les variables d\'environnement sont d√©finies');
    }

    // √âtape 2: G√©n√©rer le client Prisma
    console.log('\nüóÑÔ∏è G√©n√©ration du client Prisma...');
    try {
      execSync('npx prisma generate', { stdio: 'inherit' });
      console.log('‚úÖ Client Prisma g√©n√©r√© avec succ√®s');
    } catch (error) {
      console.log('‚ùå Erreur lors de la g√©n√©ration Prisma:', error.message);
      throw error;
    }

    // √âtape 3: Build Next.js
    console.log('\nüî® Build Next.js...');
    try {
      execSync('npx next build', { stdio: 'inherit' });
      console.log('‚úÖ Build Next.js r√©ussi');
    } catch (error) {
      console.log('‚ùå Erreur lors du build Next.js:', error.message);
      throw error;
    }

    console.log('\nüéâ Build termin√© avec succ√®s !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du build:', error.message);
    console.log('\nüîç Suggestions de r√©solution:');
    console.log('1. V√©rifiez que toutes les d√©pendances sont install√©es');
    console.log('2. V√©rifiez les variables d\'environnement dans Vercel');
    console.log('3. V√©rifiez la configuration Prisma');
    console.log('4. V√©rifiez les imports dans le code');
    
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  robustBuild()
    .then(() => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = { robustBuild };
