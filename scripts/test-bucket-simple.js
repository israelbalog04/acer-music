const { createClient } = require('@supabase/supabase-js');

async function testBucketSimple() {
  console.log('üîç Test simple du bucket Supabase...');
  
  // V√©rification des variables d'environnement
  console.log('\nüìã Variables d\'environnement:');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ D√©finie' : '‚ùå Manquante');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ D√©finie' : '‚ùå Manquante');
  
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.log('\n‚ùå Variables d\'environnement Supabase manquantes!');
    console.log('üí° Configurez ces variables:');
    console.log('   - NEXT_PUBLIC_SUPABASE_URL');
    console.log('   - SUPABASE_SERVICE_ROLE_KEY');
    return;
  }

  // Cr√©ation du client Supabase
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );

  try {
    console.log('\nüîå Test de connexion au bucket...');
    
    // Lister les buckets existants
    console.log('\nüìã Liste des buckets:');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.log('‚ùå Erreur lors de la liste des buckets:', bucketsError.message);
      console.log('\nüîç Diagnostic:');
      console.log('1. V√©rifiez les variables d\'environnement Supabase');
      console.log('2. V√©rifiez que le service role key a les bonnes permissions');
      console.log('3. V√©rifiez la configuration RLS');
    } else {
      console.log(`‚úÖ ${buckets.length} buckets trouv√©s:`);
      buckets.forEach(bucket => {
        console.log(`   - ${bucket.name} (${bucket.public ? 'public' : 'private'})`);
      });
      
      // V√©rifier le bucket multimedia
      const multimediaBucket = buckets.find(b => b.name === 'multimedia');
      if (multimediaBucket) {
        console.log('\n‚úÖ Bucket "multimedia" trouv√©!');
        
        // Lister les fichiers dans le bucket multimedia
        console.log('\nüìã Fichiers dans le bucket multimedia:');
        const { data: files, error: listError } = await supabase.storage
          .from('multimedia')
          .list();

        if (listError) {
          console.log('‚ùå Erreur lors de la liste des fichiers:', listError.message);
        } else {
          console.log(`‚úÖ ${files.length} fichiers trouv√©s:`);
          files.forEach(file => {
            console.log(`   - ${file.name} (${file.metadata?.size || 'N/A'} bytes)`);
          });
        }
      } else {
        console.log('\n‚ö†Ô∏è Bucket "multimedia" non trouv√©');
        console.log('üí° Il sera cr√©√© automatiquement lors du premier upload');
      }
    }

  } catch (error) {
    console.error('\n‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cution du test
if (require.main === module) {
  testBucketSimple()
    .then(() => {
      console.log('\n‚úÖ Test termin√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = { testBucketSimple };
