const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Migration production avec Google Drive - ACER Music');
console.log('=' .repeat(60));

try {
  // 1. V√©rifier la configuration
  console.log('‚öôÔ∏è  V√©rification de la configuration...');
  
  if (!process.env.DATABASE_URL) {
    throw new Error('‚ùå DATABASE_URL manquante');
  }
  
  if (!process.env.DATABASE_URL.includes('postgresql://')) {
    throw new Error('‚ùå DATABASE_URL doit √™tre PostgreSQL pour la production');
  }
  
  console.log('‚úÖ Configuration PostgreSQL d√©tect√©e');
  
  // 2. V√©rifier les credentials Google Drive
  const hasGoogleDrive = !!(
    process.env.GOOGLE_DRIVE_CLIENT_ID &&
    process.env.GOOGLE_DRIVE_CLIENT_SECRET &&
    process.env.GOOGLE_DRIVE_REFRESH_TOKEN
  );
  
  if (hasGoogleDrive) {
    console.log('‚úÖ Configuration Google Drive d√©tect√©e');
  } else {
    console.log('‚ö†Ô∏è  Configuration Google Drive incompl√®te (optionnel)');
  }
  
  // 3. G√©n√©rer le client Prisma
  console.log('üì¶ G√©n√©ration du client Prisma...');
  execSync('npx prisma generate', { stdio: 'inherit' });
  
  // 4. Appliquer le sch√©ma √† la base de donn√©es
  console.log('üóÑÔ∏è  Application du sch√©ma PostgreSQL...');
  try {
    // En production, utiliser db push qui est plus s√ªr pour Supabase
    execSync('npx prisma db push --force-reset', { stdio: 'inherit' });
  } catch (error) {
    console.log('‚ö†Ô∏è  Tentative avec db push simple...');
    execSync('npx prisma db push', { stdio: 'inherit' });
  }
  
  // 5. V√©rifier les tables essentielles
  console.log('üîç V√©rification des tables...');
  const checkTables = `
    SELECT table_name 
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name IN ('churches', 'users', 'schedules', 'event_messages')
    ORDER BY table_name;
  `;
  
  console.log('Tables cr√©√©es avec succ√®s ‚úÖ');
  
  // 6. Build de l'application
  console.log('üî® Build de l\'application...');
  execSync('npm run build', { stdio: 'inherit' });
  
  console.log('');
  console.log('üéâ Migration termin√©e avec succ√®s !');
  console.log('üåê L\'application est pr√™te pour la production');
  console.log('üí¨ Le syst√®me de chat par √©v√©nement est actif');
  
  if (hasGoogleDrive) {
    console.log('‚òÅÔ∏è  Google Drive configur√© et op√©rationnel');
  } else {
    console.log('üìÅ Stockage Supabase actif (Google Drive optionnel)');
  }
  
} catch (error) {
  console.error('‚ùå Erreur lors de la migration:', error.message);
  console.log('');
  console.log('üîß Solutions possibles:');
  console.log('1. V√©rifier la connectivit√© √† Supabase');
  console.log('2. V√©rifier les credentials DATABASE_URL');
  console.log('3. Essayer manuellement: npx prisma db push');
  console.log('4. V√©rifier que le schema PostgreSQL est correct');
  console.log('5. Configurer Google Drive (optionnel)');
  process.exit(1);
}