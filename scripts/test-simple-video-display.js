const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Fonction pour afficher les statistiques des vid√©os YouTube
async function displaySimpleVideoStats() {
  try {
    console.log('üé¨ Statistiques des vid√©os YouTube (Affichage simplifi√©)');
    console.log('=' .repeat(60));
    
    const churches = await prisma.church.findMany();
    if (churches.length === 0) {
      console.log('‚ùå Aucune √©glise trouv√©e.');
      return;
    }

    const church = churches[0];
    
    // R√©cup√©rer toutes les chansons avec YouTube
    const songsWithYouTube = await prisma.song.findMany({
      where: {
        churchId: church.id,
        youtubeUrl: { not: null }
      },
      orderBy: {
        title: 'asc'
      },
      select: {
        id: true,
        title: true,
        artist: true,
        youtubeUrl: true,
        createdAt: true
      }
    });
    
    console.log(`üìç √âglise: ${church.name}`);
    console.log(`üéµ Chansons avec vid√©os YouTube: ${songsWithYouTube.length}`);
    console.log('');
    
    if (songsWithYouTube.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune chanson avec vid√©o YouTube trouv√©e.');
      return;
    }
    
    // Afficher les d√©tails de chaque chanson
    console.log('üìã D√©tails des vid√©os YouTube:');
    console.log('-'.repeat(60));
    
    songsWithYouTube.forEach((song, index) => {
      const date = new Date(song.createdAt).toLocaleDateString('fr-FR');
      const embedUrl = getYouTubeEmbedUrl(song.youtubeUrl);
      
      console.log(`${index + 1}. ${song.title}`);
      console.log(`   Artiste: ${song.artist || 'Artiste inconnu'}`);
      console.log(`   URL embed: ${embedUrl}`);
      console.log(`   Ajout√©e le: ${date}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

// Fonction pour convertir les URLs YouTube
function getYouTubeEmbedUrl(url) {
  if (!url) return '';
  
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([a-zA-Z0-9_-]+)/,
    /youtube\.com\/watch\?.*v=([a-zA-Z0-9_-]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) {
      return `https://www.youtube.com/embed/${match[1]}`;
    }
  }
  
  return url;
}

// Fonction pour simuler l'affichage simplifi√©
function simulateSimpleDisplay() {
  console.log('\nüé¨ Simulation de l\'affichage simplifi√© des vid√©os:');
  console.log('=' .repeat(60));
  
  console.log('‚úÖ Nouveau comportement:');
  console.log('   ‚Ä¢ Toutes les vid√©os sont toujours visibles');
  console.log('   ‚Ä¢ Plus de bouton "Masquer/Afficher"');
  console.log('   ‚Ä¢ Interface plus √©pur√©e et simple');
  console.log('   ‚Ä¢ Acc√®s direct aux vid√©os');
  console.log('');
  
  console.log('üéØ Avantages de l\'affichage simplifi√©:');
  console.log('   ‚Ä¢ Interface plus claire et √©pur√©e');
  console.log('   ‚Ä¢ Moins de clics pour acc√©der aux vid√©os');
  console.log('   ‚Ä¢ Exp√©rience utilisateur simplifi√©e');
  console.log('   ‚Ä¢ Focus sur le contenu musical');
  console.log('');
  
  console.log('‚öôÔ∏è  Optimisations appliqu√©es:');
  console.log('   ‚Ä¢ Suppression du code de toggle');
  console.log('   ‚Ä¢ Interface plus l√©g√®re');
  console.log('   ‚Ä¢ Performance am√©lior√©e');
  console.log('   ‚Ä¢ Code plus maintenable');
  console.log('');
}

// Fonction pour tester les performances
async function testSimplifiedPerformance() {
  try {
    console.log('‚ö° Test de performance (Version simplifi√©e):');
    console.log('=' .repeat(60));
    
    const churches = await prisma.church.findMany();
    if (churches.length === 0) {
      console.log('‚ùå Aucune √©glise trouv√©e.');
      return;
    }

    const church = churches[0];
    
    // Compter les chansons avec YouTube
    const songsWithYouTube = await prisma.song.count({
      where: {
        churchId: church.id,
        youtubeUrl: { not: null }
      }
    });
    
    // Compter les chansons sans YouTube
    const songsWithoutYouTube = await prisma.song.count({
      where: {
        churchId: church.id,
        youtubeUrl: null
      }
    });
    
    const totalSongs = songsWithYouTube + songsWithoutYouTube;
    const percentageWithVideo = totalSongs > 0 ? ((songsWithYouTube / totalSongs) * 100).toFixed(1) : 0;
    
    console.log(`üìä R√©partition des chansons:`);
    console.log(`   ‚Ä¢ Avec vid√©o YouTube: ${songsWithYouTube} (${percentageWithVideo}%)`);
    console.log(`   ‚Ä¢ Sans vid√©o YouTube: ${songsWithoutYouTube}`);
    console.log(`   ‚Ä¢ Total: ${totalSongs}`);
    console.log('');
    
    // Estimation de la charge
    console.log('üìà Estimation de la charge r√©seau:');
    console.log(`   ‚Ä¢ ${songsWithYouTube} iframes YouTube charg√©es automatiquement`);
    console.log(`   ‚Ä¢ Interface simplifi√©e: Moins de JavaScript`);
    console.log(`   ‚Ä¢ Performance: Chargement plus rapide`);
    console.log(`   ‚Ä¢ UX: Acc√®s imm√©diat aux vid√©os`);
    console.log('');
    
  } catch (error) {
    console.error('‚ùå Erreur de performance:', error);
  }
}

// Fonction pour comparer les versions
function compareVersions() {
  console.log('\nüîÑ Comparaison des versions:');
  console.log('=' .repeat(60));
  
  console.log('üìä Version pr√©c√©dente (avec bouton masquer):');
  console.log('   ‚Ä¢ Bouton "Masquer/Afficher" pr√©sent');
  console.log('   ‚Ä¢ √âtat de visibilit√© g√©r√©');
  console.log('   ‚Ä¢ Code plus complexe');
  console.log('   ‚Ä¢ Plus d\'interactions utilisateur');
  console.log('');
  
  console.log('üìä Version actuelle (affichage simplifi√©):');
  console.log('   ‚Ä¢ Aucun bouton de contr√¥le');
  console.log('   ‚Ä¢ Vid√©os toujours visibles');
  console.log('   ‚Ä¢ Code plus simple');
  console.log('   ‚Ä¢ Interface √©pur√©e');
  console.log('');
  
  console.log('‚úÖ Am√©liorations apport√©es:');
  console.log('   ‚Ä¢ Interface plus claire');
  console.log('   ‚Ä¢ Moins de code √† maintenir');
  console.log('   ‚Ä¢ Performance am√©lior√©e');
  console.log('   ‚Ä¢ Exp√©rience utilisateur simplifi√©e');
  console.log('');
}

// Fonction principale
async function runSimpleDisplayTests() {
  console.log('üé¨ Tests de l\'affichage simplifi√© des vid√©os YouTube\n');
  
  // Tests de base de donn√©es
  await displaySimpleVideoStats();
  
  // Simulation de l'affichage
  simulateSimpleDisplay();
  
  // Tests de performance
  await testSimplifiedPerformance();
  
  // Comparaison des versions
  compareVersions();
  
  console.log('‚úÖ Tests termin√©s !');
  console.log('\nüìã Instructions pour tester:');
  console.log('1. Lancez l\'application: npm run dev');
  console.log('2. Allez dans Musique > R√©pertoire');
  console.log('3. V√©rifiez que toutes les vid√©os sont visibles');
  console.log('4. Confirmez l\'absence du bouton "Masquer"');
  console.log('5. Testez la responsivit√© sur mobile');
  console.log('6. V√©rifiez les contr√¥les YouTube (play, pause, plein √©cran)');
  console.log('');
  console.log('üéØ R√©sultat attendu:');
  console.log('   ‚Ä¢ Toutes les vid√©os YouTube sont visibles');
  console.log('   ‚Ä¢ Aucun bouton de contr√¥le pour masquer/afficher');
  console.log('   ‚Ä¢ Interface √©pur√©e et simple');
  console.log('   ‚Ä¢ Acc√®s direct aux contenus vid√©o');
  
  await prisma.$disconnect();
}

// Ex√©cuter les tests
runSimpleDisplayTests().catch(console.error);
