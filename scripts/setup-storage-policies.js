const { createClient } = require('@supabase/supabase-js');

async function setupStoragePolicies() {
  console.log('üîí Configuration des politiques RLS pour le storage Supabase...');
  
  // V√©rification des variables d'environnement
  console.log('\nüìã Variables d\'environnement:');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ D√©finie' : '‚ùå Manquante');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ D√©finie' : '‚ùå Manquante');
  
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.log('\n‚ùå Variables d\'environnement Supabase manquantes!');
    console.log('üí° Configurez ces variables:');
    console.log('   - NEXT_PUBLIC_SUPABASE_URL');
    console.log('   - SUPABASE_SERVICE_ROLE_KEY');
    return;
  }

  // Cr√©ation du client Supabase
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );

  try {
    console.log('\nüîå Connexion √† Supabase...');
    
    // Politiques pour chaque bucket
    const policies = [
      {
        bucket: 'multimedia',
        name: 'Multimedia access policy',
        description: 'Acc√®s aux fichiers multim√©dias pour les utilisateurs authentifi√©s de la m√™me √©glise',
        policy: `
          CREATE POLICY "Multimedia access policy" ON storage.objects
          FOR ALL USING (
            bucket_id = 'multimedia' AND 
            auth.role() = 'authenticated' AND
            (storage.foldername(name))[1] = auth.jwt() ->> 'churchId'
          );
        `
      },
      {
        bucket: 'recordings',
        name: 'Recordings access policy', 
        description: 'Acc√®s aux enregistrements pour les utilisateurs authentifi√©s de la m√™me √©glise',
        policy: `
          CREATE POLICY "Recordings access policy" ON storage.objects
          FOR ALL USING (
            bucket_id = 'recordings' AND 
            auth.role() = 'authenticated' AND
            (storage.foldername(name))[1] = auth.jwt() ->> 'churchId'
          );
        `
      },
      {
        bucket: 'sequences',
        name: 'Sequences access policy',
        description: 'Acc√®s aux partitions pour les utilisateurs authentifi√©s de la m√™me √©glise',
        policy: `
          CREATE POLICY "Sequences access policy" ON storage.objects
          FOR ALL USING (
            bucket_id = 'sequences' AND 
            auth.role() = 'authenticated' AND
            (storage.foldername(name))[1] = auth.jwt() ->> 'churchId'
          );
        `
      },
      {
        bucket: 'avatars',
        name: 'Avatars public read policy',
        description: 'Lecture publique des avatars, √©criture pour les utilisateurs authentifi√©s',
        policy: `
          CREATE POLICY "Avatars public read policy" ON storage.objects
          FOR SELECT USING (bucket_id = 'avatars');
          
          CREATE POLICY "Avatars authenticated write policy" ON storage.objects
          FOR INSERT WITH CHECK (
            bucket_id = 'avatars' AND 
            auth.role() = 'authenticated'
          );
          
          CREATE POLICY "Avatars owner update policy" ON storage.objects
          FOR UPDATE USING (
            bucket_id = 'avatars' AND 
            auth.role() = 'authenticated' AND
            (storage.foldername(name))[1] = auth.uid()::text
          );
          
          CREATE POLICY "Avatars owner delete policy" ON storage.objects
          FOR DELETE USING (
            bucket_id = 'avatars' AND 
            auth.role() = 'authenticated' AND
            (storage.foldername(name))[1] = auth.uid()::text
          );
        `
      }
    ];

    console.log('\nüîí Configuration des politiques RLS...');
    
    for (const policyConfig of policies) {
      console.log(`\nüìã Bucket: ${policyConfig.bucket}`);
      console.log(`   Nom: ${policyConfig.name}`);
      console.log(`   Description: ${policyConfig.description}`);
      
      // Note: Les politiques RLS doivent √™tre configur√©es manuellement dans Supabase Dashboard
      // car elles n√©cessitent des privil√®ges SQL sp√©ciaux
      console.log(`   ‚ö†Ô∏è  Politique √† configurer manuellement dans Supabase Dashboard`);
      console.log(`   üìù SQL √† ex√©cuter:`);
      console.log(`   ${policyConfig.policy}`);
    }

    console.log('\nüìã Instructions pour configurer les politiques RLS:');
    console.log('1. Allez dans Supabase Dashboard');
    console.log('2. Storage ‚Üí Policies');
    console.log('3. S√©lectionnez chaque bucket');
    console.log('4. Cliquez sur "New Policy"');
    console.log('5. Copiez-collez les politiques SQL ci-dessus');
    console.log('6. Sauvegardez chaque politique');

    console.log('\nüéâ Instructions de configuration termin√©es!');
    console.log('\nüí° Note: Les politiques RLS doivent √™tre configur√©es manuellement');
    console.log('   car elles n√©cessitent des privil√®ges SQL sp√©ciaux.');

  } catch (error) {
    console.error('\n‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cution du script
if (require.main === module) {
  setupStoragePolicies()
    .then(() => {
      console.log('\n‚úÖ Script termin√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = { setupStoragePolicies };
