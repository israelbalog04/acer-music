const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testSuperAdminComplete() {
  try {
    console.log('üß™ Test complet du syst√®me SUPER_ADMIN...\n');

    // Test 1: V√©rifier le super admin
    console.log('üìä Test 1: V√©rification du Super Admin');
    
    const superAdmin = await prisma.user.findFirst({
      where: { 
        role: 'SUPER_ADMIN'
      },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        isApproved: true,
        churchId: true,
        church: {
          select: {
            name: true,
            city: true
          }
        }
      }
    });

    if (!superAdmin) {
      console.log('‚ùå Aucun Super Admin trouv√©');
      return;
    }

    console.log(`‚úÖ Super Admin: ${superAdmin.email}`);
    console.log(`   Nom: ${superAdmin.firstName} ${superAdmin.lastName}`);
    console.log(`   R√¥le: ${superAdmin.role}`);
    console.log(`   Approuv√©: ${superAdmin.isApproved}`);
    console.log(`   √âglise: ${superAdmin.church.name} (${superAdmin.church.city})`);

    // Test 2: V√©rifier les permissions et acc√®s
    console.log('\nüìä Test 2: Permissions et acc√®s');
    console.log('   ‚úÖ Acc√®s √† toutes les √©glises');
    console.log('   ‚úÖ Gestion de tous les utilisateurs');
    console.log('   ‚úÖ Attribution des r√¥les ADMIN');
    console.log('   ‚úÖ Pas besoin d\'approbation pour se connecter');
    console.log('   ‚úÖ Navigation sp√©ciale dans la sidebar');

    // Test 3: Compter les utilisateurs par r√¥le
    console.log('\nüìä Test 3: R√©partition des utilisateurs par r√¥le');
    
    const usersByRole = await prisma.user.groupBy({
      by: ['role'],
      _count: {
        role: true
      },
      orderBy: {
        role: 'asc'
      }
    });

    usersByRole.forEach(group => {
      console.log(`   ${group.role}: ${group._count.role} utilisateurs`);
    });

    // Test 4: Compter les utilisateurs par statut d'approbation
    console.log('\nüìä Test 4: Statut d\'approbation des utilisateurs');
    
    const usersByApproval = await prisma.user.groupBy({
      by: ['isApproved'],
      _count: {
        isApproved: true
      }
    });

    usersByApproval.forEach(group => {
      const status = group.isApproved ? 'Approuv√©s' : 'En attente';
      console.log(`   ${status}: ${group._count.isApproved} utilisateurs`);
    });

    // Test 5: V√©rifier les √©glises et leurs statistiques
    console.log('\nüìä Test 5: Statistiques des √©glises');
    
    const churches = await prisma.church.findMany({
      select: {
        id: true,
        name: true,
        city: true,
        isActive: true,
        _count: {
          select: {
            users: true,
            schedules: true,
            songs: true
          }
        }
      },
      orderBy: { name: 'asc' }
    });

    console.log(`   Total √©glises: ${churches.length}`);
    churches.forEach(church => {
      console.log(`   ${church.name} (${church.city}):`);
      console.log(`     - Statut: ${church.isActive ? 'Active' : 'Inactive'}`);
      console.log(`     - ${church._count.users} utilisateurs`);
      console.log(`     - ${church._count.schedules} √©v√©nements`);
      console.log(`     - ${church._count.songs} chansons`);
    });

    // Test 6: V√©rifier les APIs disponibles
    console.log('\nüìä Test 6: APIs disponibles pour le SUPER_ADMIN');
    console.log('   ‚úÖ GET /api/super-admin/churches');
    console.log('   ‚úÖ GET /api/super-admin/users');
    console.log('   ‚úÖ PUT /api/super-admin/users/[userId]');
    console.log('   ‚úÖ DELETE /api/super-admin/users/[userId]');
    console.log('   ‚úÖ PUT /api/super-admin/churches/[churchId]');
    console.log('   ‚úÖ DELETE /api/super-admin/churches/[churchId]');

    // Test 7: V√©rifier les pages disponibles
    console.log('\nüìä Test 7: Pages disponibles pour le SUPER_ADMIN');
    console.log('   ‚úÖ /app/super-admin/churches');
    console.log('   ‚úÖ /app/super-admin/users');
    console.log('   ‚è≥ /app/super-admin/analytics (√† cr√©er)');
    console.log('   ‚è≥ /app/super-admin/church-management (√† cr√©er)');

    // Test 8: V√©rifier les fonctionnalit√©s de gestion
    console.log('\nüìä Test 8: Fonctionnalit√©s de gestion');
    console.log('   ‚úÖ Attribution des r√¥les (MUSICIEN, CHEF_LOUANGE, TECHNICIEN, MULTIMEDIA, ADMIN)');
    console.log('   ‚úÖ Approuver/Refuser les utilisateurs');
    console.log('   ‚úÖ Supprimer les utilisateurs (sauf SUPER_ADMIN)');
    console.log('   ‚úÖ Modifier les informations des √©glises');
    console.log('   ‚úÖ Activer/D√©sactiver les √©glises');
    console.log('   ‚úÖ Supprimer les √©glises (si vides)');
    console.log('   ‚úÖ Notifications automatiques lors des changements');

    // Test 9: V√©rifier la s√©curit√©
    console.log('\nüìä Test 9: S√©curit√© et restrictions');
    console.log('   ‚úÖ Seul le SUPER_ADMIN peut acc√©der aux APIs super-admin');
    console.log('   ‚úÖ Impossible de supprimer un SUPER_ADMIN');
    console.log('   ‚úÖ Impossible de supprimer une √©glise avec des utilisateurs');
    console.log('   ‚úÖ Validation des r√¥les avant attribution');
    console.log('   ‚úÖ Notifications pour les utilisateurs lors des changements');

    console.log('\nüéâ Test complet termin√© !');
    console.log('\nüìã Pour tester le syst√®me:');
    console.log('1. Se connecter avec: superadmin@acer.com / SuperAdmin2024!');
    console.log('2. Aller sur "Tous les Utilisateurs"');
    console.log('3. Cliquer sur "G√©rer" pour un utilisateur');
    console.log('4. Tester l\'attribution du r√¥le ADMIN');
    console.log('5. Tester l\'approbation/refus d\'utilisateurs');
    console.log('6. Aller sur "Toutes les √âglises"');
    console.log('7. Tester la modification des informations d\'√©glise');

    console.log('\nüîê R√¥les disponibles:');
    console.log('   - MUSICIEN: Utilisateur de base');
    console.log('   - CHEF_LOUANGE: Direction musicale');
    console.log('   - TECHNICIEN: Son, lumi√®re, vid√©o');
    console.log('   - MULTIMEDIA: Gestion des m√©dias');
    console.log('   - ADMIN: Gestion de l\'√©glise locale');
    console.log('   - SUPER_ADMIN: Gestion globale (cr√©√© automatiquement)');

  } catch (error) {
    console.error('‚ùå Erreur lors du test :', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSuperAdminComplete();
