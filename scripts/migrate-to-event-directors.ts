import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function migrateToEventDirectors() {
  try {
    console.log('üîÑ Migration vers le syst√®me DM par √©v√©nement...')

    // 1. Nettoyer d'√©ventuelles anciennes s√©quences
    console.log('\nüóëÔ∏è  Nettoyage des anciennes donn√©es...')
    const oldSequences = await prisma.sequence.count()
    console.log(`Trouv√© ${oldSequences} s√©quences existantes √† nettoyer`)
    
    if (oldSequences > 0) {
      await prisma.sequenceDownload.deleteMany()
      await prisma.sequence.deleteMany()
      console.log('‚úÖ Anciennes s√©quences supprim√©es')
    }

    // 2. Cr√©er des √©v√©nements d'exemple pour tester
    console.log('\nüìÖ Cr√©ation d\'√©v√©nements d\'exemple...')
    const churches = await prisma.church.findMany({
      include: { users: true }
    })

    for (const church of churches) {
      // Cr√©er un √©v√©nement "Culte du Dimanche"
      const event = await prisma.schedule.create({
        data: {
          title: 'Culte du Dimanche - Test DM',
          description: 'Service dominical avec √©quipe musicale',
          date: new Date('2024-01-14'),
          startTime: new Date('2024-01-14T10:00:00').toISOString(),
          endTime: new Date('2024-01-14T12:00:00').toISOString(),
          type: 'SERVICE',
          location: 'Sanctuaire Principal',
          status: 'PLANNED',
          churchId: church.id
        }
      })

      console.log(`‚úÖ √âv√©nement cr√©√© pour ${church.name}: ${event.title}`)

      // Assigner 1-2 musiciens comme DM pour cet √©v√©nement
      const musiciens = church.users.filter(user => user.role === 'MUSICIEN')
      const admin = church.users.find(user => user.role === 'ADMIN')

      if (musiciens.length > 0 && admin) {
        const selectedMusiciens = musiciens.slice(0, 2) // Prendre 2 musiciens max

        for (const musicien of selectedMusiciens) {
          const eventDirector = await prisma.eventDirector.create({
            data: {
              scheduleId: event.id,
              userId: musicien.id,
              churchId: church.id,
              assignedById: admin.id,
              isActive: true,
              notes: `DM assign√© pour ${event.title}`
            }
          })

          console.log(`   üéº ${musicien.firstName} ${musicien.lastName} assign√© comme DM`)
        }
      }

      // Cr√©er des s√©quences d'exemple pour cet √©v√©nement
      const songs = await prisma.song.findMany({
        where: { churchId: church.id },
        take: 2
      })

      if (songs.length > 0 && musiciens.length > 0) {
        for (let i = 0; i < songs.length; i++) {
          const song = songs[i]
          const sequence = await prisma.sequence.create({
            data: {
              title: `${song.title} - Arrangement √âv√©nement`,
              description: `S√©quence sp√©cifique pour ${event.title}`,
              songId: song.id,
              scheduleId: event.id, // Li√© √† l'√©v√©nement
              key: 'G',
              bpm: 120,
              difficulty: 'Interm√©diaire',
              category: 'Louange',
              instruments: JSON.stringify(['Piano', 'Guitare']),
              tags: JSON.stringify(['√©v√©nement', 'culte']),
              scope: 'EVENT',
              churchId: church.id,
              createdById: musiciens[0].id, // Premier musicien comme cr√©ateur
              fileName: `${song.title.replace(/\s+/g, '_').toLowerCase()}_event.pdf`,
              fileType: 'application/pdf',
              fileSize: Math.floor(Math.random() * 300000) + 100000
            }
          })

          console.log(`   üéµ S√©quence cr√©√©e: ${sequence.title}`)
        }
      }
    }

    // 3. Cr√©er quelques s√©quences globales (accessibles par toute l'√©glise)
    console.log('\nüåç Cr√©ation de s√©quences globales...')
    
    for (const church of churches) {
      const chefLouange = church.users.find(user => user.role === 'CHEF_LOUANGE')
      const songs = await prisma.song.findMany({
        where: { churchId: church.id },
        take: 1
      })

      if (chefLouange && songs.length > 0) {
        const globalSequence = await prisma.sequence.create({
          data: {
            title: `${songs[0].title} - Arrangement Global`,
            description: 'S√©quence disponible pour tous les √©v√©nements de l\'√©glise',
            songId: songs[0].id,
            // scheduleId: null (pas li√© √† un √©v√©nement sp√©cifique)
            key: 'D',
            bpm: 100,
            difficulty: 'Interm√©diaire',
            category: 'Adoration',
            instruments: JSON.stringify(['Piano', 'Chant']),
            tags: JSON.stringify(['global', 'standard']),
            scope: 'GLOBAL',
            churchId: church.id,
            createdById: chefLouange.id,
            fileName: `${songs[0].title.replace(/\s+/g, '_').toLowerCase()}_global.pdf`,
            fileType: 'application/pdf',
            fileSize: Math.floor(Math.random() * 400000) + 150000
          }
        })

        console.log(`   üåç S√©quence globale cr√©√©e: ${globalSequence.title}`)
      }
    }

    console.log('\nüéâ Migration termin√©e avec succ√®s!')
    console.log('\nüìã Nouveau syst√®me:')
    console.log('   ‚úÖ DM = Attribution temporaire par √©v√©nement')
    console.log('   ‚úÖ Responsables assignent les DM')
    console.log('   ‚úÖ S√©quences li√©es aux √©v√©nements OU globales')
    console.log('   ‚úÖ Permissions contextuelles selon l\'√©v√©nement')

    // Afficher un r√©sum√©
    console.log('\nüìä R√©sum√©:')
    const totalEvents = await prisma.schedule.count()
    const totalEventDirectors = await prisma.eventDirector.count()
    const totalSequences = await prisma.sequence.count()

    console.log(`   üìÖ √âv√©nements cr√©√©s: ${totalEvents}`)
    console.log(`   üéº Attributions DM: ${totalEventDirectors}`)
    console.log(`   üéµ S√©quences: ${totalSequences}`)

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
  } finally {
    await prisma.$disconnect()
  }
}

migrateToEventDirectors()