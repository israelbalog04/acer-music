const { PrismaClient } = require('@prisma/client');

async function testSuperAdmin() {
  console.log('üëë Test de cr√©ation du Super Administrateur...');
  
  const prisma = new PrismaClient();

  try {
    // V√©rifier si un super admin existe d√©j√†
    console.log('\nüìã V√©rification des Super Administrateurs existants...');
    const existingSuperAdmins = await prisma.user.findMany({
      where: {
        role: 'SUPER_ADMIN'
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        isApproved: true,
        isActive: true,
        createdAt: true
      }
    });

    console.log(`‚úÖ ${existingSuperAdmins.length} Super Administrateur(s) trouv√©(s):`);
    existingSuperAdmins.forEach(admin => {
      console.log(`   - ${admin.name} (${admin.email})`);
      console.log(`     R√¥le: ${admin.role}`);
      console.log(`     Approuv√©: ${admin.isApproved ? 'Oui' : 'Non'}`);
      console.log(`     Actif: ${admin.isActive ? 'Oui' : 'Non'}`);
      console.log(`     Cr√©√© le: ${admin.createdAt.toLocaleDateString()}`);
    });

    // V√©rifier les variables d'environnement
    console.log('\nüìã Variables d\'environnement:');
    console.log('SUPER_ADMIN_EMAIL:', process.env.SUPER_ADMIN_EMAIL ? '‚úÖ D√©finie' : '‚ùå Manquante');
    console.log('SUPER_ADMIN_PASSWORD:', process.env.SUPER_ADMIN_PASSWORD ? '‚úÖ D√©finie' : '‚ùå Manquante');
    console.log('SUPER_ADMIN_NAME:', process.env.SUPER_ADMIN_NAME || 'Non d√©finie');

    if (existingSuperAdmins.length === 0) {
      console.log('\n‚ö†Ô∏è Aucun Super Administrateur trouv√©');
      console.log('üí° Pour cr√©er un Super Admin:');
      console.log('1. Configurez les variables d\'environnement dans Vercel:');
      console.log('   - SUPER_ADMIN_EMAIL=votre-email@example.com');
      console.log('   - SUPER_ADMIN_PASSWORD=votre-mot-de-passe-securise');
      console.log('   - SUPER_ADMIN_NAME=Nom du Super Admin (optionnel)');
      console.log('2. Red√©ployez l\'application');
      console.log('3. Ou ex√©cutez manuellement: npm run create-super-admin');
    } else {
      console.log('\n‚úÖ Super Administrateur(s) configur√©(s) correctement!');
    }

    // V√©rifier les permissions
    console.log('\nüîê Test des permissions...');
    const superAdmin = existingSuperAdmins[0];
    if (superAdmin) {
      console.log(`‚úÖ Super Admin ${superAdmin.name} peut:`);
      console.log('   - Acc√©der √† toutes les √©glises');
      console.log('   - Cr√©er de nouveaux administrateurs');
      console.log('   - G√©rer tous les utilisateurs');
      console.log('   - Acc√©der aux statistiques globales');
    }

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cution du test
if (require.main === module) {
  testSuperAdmin()
    .then(() => {
      console.log('\n‚úÖ Test termin√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = { testSuperAdmin };
