const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testSuperAdminLogin() {
  try {
    console.log('üß™ Test de connexion du Super Admin...\n');

    // Test 1: V√©rifier que le super admin existe
    console.log('üìä Test 1: V√©rification du Super Admin');
    
    const superAdmin = await prisma.user.findFirst({
      where: { 
        role: 'SUPER_ADMIN'
      },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        isApproved: true,
        password: true,
        churchId: true,
        church: {
          select: {
            name: true,
            city: true
          }
        }
      }
    });

    if (!superAdmin) {
      console.log('‚ùå Aucun Super Admin trouv√©');
      return;
    }

    console.log(`‚úÖ Super Admin trouv√©: ${superAdmin.email}`);
    console.log(`   Nom: ${superAdmin.firstName} ${superAdmin.lastName}`);
    console.log(`   R√¥le: ${superAdmin.role}`);
    console.log(`   Approuv√©: ${superAdmin.isApproved}`);
    console.log(`   √âglise: ${superAdmin.church.name} (${superAdmin.church.city})`);

    // Test 2: V√©rifier le mot de passe
    console.log('\nüìä Test 2: V√©rification du mot de passe');
    
    const testPassword = 'SuperAdmin2024!';
    const isPasswordValid = await bcrypt.compare(testPassword, superAdmin.password);
    
    console.log(`   Mot de passe test√©: ${testPassword}`);
    console.log(`   Mot de passe valide: ${isPasswordValid ? '‚úÖ OUI' : '‚ùå NON'}`);

    // Test 3: Simuler la logique d'authentification
    console.log('\nüìä Test 3: Simulation de l\'authentification');
    
    if (!superAdmin.isApproved && superAdmin.role !== 'SUPER_ADMIN') {
      console.log('‚ùå Utilisateur non approuv√© et pas SUPER_ADMIN');
    } else {
      console.log('‚úÖ Utilisateur peut se connecter (approuv√© ou SUPER_ADMIN)');
    }

    // Test 4: V√©rifier les types Prisma
    console.log('\nüìä Test 4: V√©rification des types Prisma');
    
    try {
      // Tester si SUPER_ADMIN est reconnu dans l'enum
      const testUser = await prisma.user.findFirst({
        where: {
          role: 'SUPER_ADMIN'
        }
      });
      console.log('‚úÖ Enum UserRole reconna√Æt SUPER_ADMIN');
    } catch (error) {
      console.log('‚ùå Erreur avec l\'enum UserRole:', error.message);
    }

    // Test 5: V√©rifier la structure de la session
    console.log('\nüìä Test 5: Structure de session attendue');
    console.log('   La session devrait contenir:');
    console.log('   - id: string');
    console.log('   - email: string');
    console.log('   - name: string');
    console.log('   - role: "SUPER_ADMIN"');
    console.log('   - instruments: string[]');
    console.log('   - avatar: string | null');
    console.log('   - churchId: string');
    console.log('   - churchName: string');
    console.log('   - churchCity: string');
    console.log('   - isApproved: boolean');

    console.log('\nüéâ Test termin√© !');
    console.log('\nüìã Pour tester la connexion:');
    console.log('1. Aller sur http://localhost:3000/auth/login');
    console.log('2. Email: superadmin@acer.com');
    console.log('3. Mot de passe: SuperAdmin2024!');
    console.log('4. V√©rifier que la connexion fonctionne');
    console.log('5. V√©rifier que la navigation SUPER_ADMIN s\'affiche');

    console.log('\nüîç Si la connexion √©choue:');
    console.log('1. V√©rifier que le serveur a red√©marr√©');
    console.log('2. V√©rifier que Prisma Client a √©t√© r√©g√©n√©r√©');
    console.log('3. V√©rifier les logs du serveur');
    console.log('4. V√©rifier que l\'enum UserRole contient SUPER_ADMIN');

  } catch (error) {
    console.error('‚ùå Erreur lors du test :', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSuperAdminLogin();
