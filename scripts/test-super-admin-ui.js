const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testSuperAdminUI() {
  try {
    console.log('üß™ Test de l\'interface SUPER_ADMIN...\n');

    // Test 1: V√©rifier le super admin
    console.log('üìä Test 1: V√©rification du Super Admin');
    
    const superAdmin = await prisma.user.findFirst({
      where: { 
        role: 'SUPER_ADMIN'
      },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        isApproved: true
      }
    });

    if (!superAdmin) {
      console.log('‚ùå Aucun Super Admin trouv√©');
      return;
    }

    console.log(`‚úÖ Super Admin: ${superAdmin.email}`);
    console.log(`   R√¥le: ${superAdmin.role}`);
    console.log(`   Approuv√©: ${superAdmin.isApproved}`);

    // Test 2: V√©rifier les fichiers de l'interface
    console.log('\nüìä Test 2: V√©rification des fichiers de l\'interface');
    const fs = require('fs');

    const filesToCheck = [
      'src/components/layout/sidebar.tsx',
      'src/lib/permissions.ts',
      'src/app/app/super-admin/churches/page.tsx',
      'src/app/app/super-admin/users/page.tsx',
      'src/app/api/super-admin/churches/route.ts',
      'src/app/api/super-admin/users/route.ts'
    ];

    filesToCheck.forEach(filePath => {
      if (fs.existsSync(filePath)) {
        console.log(`   ‚úÖ ${filePath} existe`);
      } else {
        console.log(`   ‚ùå ${filePath} n'existe pas`);
      }
    });

    // Test 3: V√©rifier les imports dans sidebar.tsx
    console.log('\nüìä Test 3: V√©rification des imports dans sidebar.tsx');
    
    const sidebarContent = fs.readFileSync('src/components/layout/sidebar.tsx', 'utf8');
    
    const requiredImports = [
      'BuildingOfficeIcon',
      'getNavigationForRole'
    ];

    requiredImports.forEach(importName => {
      if (sidebarContent.includes(importName)) {
        console.log(`   ‚úÖ ${importName} est import√©`);
      } else {
        console.log(`   ‚ùå ${importName} n'est pas import√©`);
      }
    });

    // Test 4: V√©rifier la section super-admin dans sidebar.tsx
    console.log('\nüìä Test 4: V√©rification de la section super-admin');
    
    if (sidebarContent.includes("'super-admin': { name: 'Super Administration'")) {
      console.log('   ‚úÖ Section super-admin configur√©e');
    } else {
      console.log('   ‚ùå Section super-admin manquante');
    }

    // Test 5: V√©rifier la navigation dans permissions.ts
    console.log('\nüìä Test 5: V√©rification de la navigation');
    
    const permissionsContent = fs.readFileSync('src/lib/permissions.ts', 'utf8');
    
    if (permissionsContent.includes('case UserRole.SUPER_ADMIN:')) {
      console.log('   ‚úÖ Navigation SUPER_ADMIN configur√©e');
    } else {
      console.log('   ‚ùå Navigation SUPER_ADMIN manquante');
    }

    // Test 6: V√©rifier les pages
    console.log('\nüìä Test 6: V√©rification des pages');
    
    const churchesPageContent = fs.readFileSync('src/app/app/super-admin/churches/page.tsx', 'utf8');
    const usersPageContent = fs.readFileSync('src/app/app/super-admin/users/page.tsx', 'utf8');
    
    if (churchesPageContent.includes('session?.user?.role === \'SUPER_ADMIN\'')) {
      console.log('   ‚úÖ Page churches v√©rifie le r√¥le SUPER_ADMIN');
    } else {
      console.log('   ‚ùå Page churches ne v√©rifie pas le r√¥le SUPER_ADMIN');
    }
    
    if (usersPageContent.includes('session?.user?.role === \'SUPER_ADMIN\'')) {
      console.log('   ‚úÖ Page users v√©rifie le r√¥le SUPER_ADMIN');
    } else {
      console.log('   ‚ùå Page users ne v√©rifie pas le r√¥le SUPER_ADMIN');
    }

    console.log('\nüéâ Test de l\'interface termin√© !');
    console.log('\nüìã Pour tester l\'interface:');
    console.log('1. Attendre que le serveur red√©marre compl√®tement');
    console.log('2. Aller sur http://localhost:3000/auth/login');
    console.log('3. Se connecter avec: superadmin@acer.com / SuperAdmin2024!');
    console.log('4. V√©rifier que la sidebar affiche:');
    console.log('   - Dashboard');
    console.log('   - Toutes les √âglises');
    console.log('   - Tous les Utilisateurs');
    console.log('   - Statistiques Globales');
    console.log('   - Gestion des √âglises');
    console.log('   - Mon Profil');
    console.log('   - Notifications');
    console.log('   - Param√®tres');

    console.log('\nüîç Si la navigation ne s\'affiche toujours pas:');
    console.log('1. Vider le cache du navigateur (Ctrl+Shift+R)');
    console.log('2. Ouvrir les outils de d√©veloppement (F12)');
    console.log('3. Aller dans l\'onglet Console');
    console.log('4. Taper: console.log(session?.user?.role)');
    console.log('5. V√©rifier que le r√©sultat est "SUPER_ADMIN"');

  } catch (error) {
    console.error('‚ùå Erreur lors du test :', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSuperAdminUI();
