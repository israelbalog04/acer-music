require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function createSupabaseBuckets() {
  console.log('üöÄ Cr√©ation des buckets Supabase pour ACER Music...');
  
  // V√©rification des variables d'environnement
  console.log('\nüìã Variables d\'environnement:');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ D√©finie' : '‚ùå Manquante');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ D√©finie' : '‚ùå Manquante');
  
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.log('\n‚ùå Variables d\'environnement Supabase manquantes!');
    console.log('üí° Configurez ces variables:');
    console.log('   - NEXT_PUBLIC_SUPABASE_URL');
    console.log('   - SUPABASE_SERVICE_ROLE_KEY');
    return;
  }

  // Cr√©ation du client Supabase
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );

  // Configuration des buckets
  const bucketsConfig = [
    {
      name: 'multimedia',
      public: false,
      allowedMimeTypes: ['image/*', 'video/*'],
      fileSizeLimit: 52428800, // 50MB
      description: 'Images, photos, vid√©os des musiciens'
    },
    {
      name: 'recordings',
      public: false,
      allowedMimeTypes: ['audio/*'],
      fileSizeLimit: 104857600, // 100MB
      description: 'Fichiers audio des enregistrements'
    },
    {
      name: 'sequences',
      public: false,
      allowedMimeTypes: ['text/*', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
      fileSizeLimit: 10485760, // 10MB
      description: 'Fichiers de partitions musicales'
    },
    {
      name: 'avatars',
      public: true,
      allowedMimeTypes: ['image/*'],
      fileSizeLimit: 5242880, // 5MB
      description: 'Photos de profil des utilisateurs'
    }
  ];

  try {
    console.log('\nüîå Connexion √† Supabase...');
    
    // Lister les buckets existants
    console.log('\nüìã Buckets existants:');
    const { data: existingBuckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.log('‚ùå Erreur lors de la liste des buckets:', listError.message);
      return;
    }

    const existingBucketNames = existingBuckets.map(bucket => bucket.name);
    console.log(`‚úÖ ${existingBuckets.length} buckets trouv√©s:`, existingBucketNames);

    // Cr√©er ou v√©rifier chaque bucket
    console.log('\nüî® Cr√©ation/V√©rification des buckets...');
    
    for (const config of bucketsConfig) {
      console.log(`\nüì¶ Bucket: ${config.name}`);
      console.log(`   Description: ${config.description}`);
      console.log(`   Public: ${config.public ? 'Oui' : 'Non'}`);
      console.log(`   Taille max: ${config.fileSizeLimit / 1024 / 1024}MB`);
      
      if (existingBucketNames.includes(config.name)) {
        console.log(`   ‚úÖ Existe d√©j√†`);
        
        // V√©rifier la configuration du bucket existant
        const { data: bucketInfo, error: getError } = await supabase.storage.getBucket(config.name);
        if (!getError && bucketInfo) {
          console.log(`   üìã Configuration actuelle:`);
          console.log(`      - Public: ${bucketInfo.public}`);
          console.log(`      - File size limit: ${bucketInfo.file_size_limit || 'Non d√©fini'}`);
        }
      } else {
        console.log(`   üî® Cr√©ation en cours...`);
        
        const { data: newBucket, error: createError } = await supabase.storage.createBucket(config.name, {
          public: config.public,
          allowedMimeTypes: config.allowedMimeTypes,
          fileSizeLimit: config.fileSizeLimit
        });
        
        if (createError) {
          console.log(`   ‚ùå Erreur lors de la cr√©ation:`, createError.message);
        } else {
          console.log(`   ‚úÖ Cr√©√© avec succ√®s!`);
        }
      }
    }

    // V√©rification finale
    console.log('\nüîç V√©rification finale...');
    const { data: finalBuckets, error: finalError } = await supabase.storage.listBuckets();
    
    if (!finalError) {
      console.log(`‚úÖ ${finalBuckets.length} buckets au total:`);
      finalBuckets.forEach(bucket => {
        console.log(`   - ${bucket.name} (${bucket.public ? 'public' : 'private'})`);
      });
    }

    console.log('\nüéâ Configuration des buckets termin√©e!');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Configurez les politiques RLS (Row Level Security)');
    console.log('2. Testez l\'upload de fichiers dans l\'application');
    console.log('3. V√©rifiez les permissions d\'acc√®s');

  } catch (error) {
    console.error('\n‚ùå Erreur g√©n√©rale:', error.message);
    console.log('\nüîç Diagnostic:');
    console.log('1. V√©rifiez les variables d\'environnement Supabase');
    console.log('2. V√©rifiez que le service role key a les bonnes permissions');
    console.log('3. V√©rifiez la configuration RLS');
  }
}

// Ex√©cution du script
if (require.main === module) {
  createSupabaseBuckets()
    .then(() => {
      console.log('\n‚úÖ Script termin√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = { createSupabaseBuckets };
