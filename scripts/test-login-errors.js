const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testLoginErrors() {
  try {
    console.log('üß™ Test des messages d\'erreur de connexion...\n');

    // Test 1: Email qui n'existe pas
    console.log('1Ô∏è‚É£ Test avec un email inexistant...');
    const nonExistentEmail = 'nonexistent@example.com';
    const user1 = await prisma.user.findUnique({
      where: { email: nonExistentEmail }
    });
    
    if (!user1) {
      console.log('   ‚úÖ EMAIL_NOT_FOUND - Aucun compte trouv√© avec cette adresse email');
    } else {
      console.log('   ‚ùå Erreur: L\'email existe alors qu\'il ne devrait pas');
    }

    // Test 2: Email existant mais mot de passe incorrect
    console.log('\n2Ô∏è‚É£ Test avec un email existant mais mot de passe incorrect...');
    const existingUser = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    });

    if (existingUser) {
      console.log(`   üìß Email test√©: ${existingUser.email}`);
      
      // Test avec un mot de passe incorrect
      const wrongPassword = 'wrongpassword123';
      const isPasswordValid = await bcrypt.compare(wrongPassword, existingUser.password);
      
      if (!isPasswordValid) {
        console.log('   ‚úÖ INVALID_PASSWORD - Mot de passe incorrect');
      } else {
        console.log('   ‚ùå Erreur: Le mot de passe incorrect a √©t√© accept√©');
      }
    } else {
      console.log('   ‚ö†Ô∏è Aucun utilisateur trouv√© pour le test');
    }

    // Test 3: Compte non approuv√©
    console.log('\n3Ô∏è‚É£ Test avec un compte non approuv√©...');
    const unapprovedUser = await prisma.user.findFirst({
      where: { isApproved: false }
    });

    if (unapprovedUser) {
      console.log(`   üìß Email test√©: ${unapprovedUser.email}`);
      console.log(`   ‚úÖ USER_NOT_APPROVED - Compte non approuv√© (${unapprovedUser.role})`);
    } else {
      console.log('   ‚úÖ Tous les comptes sont approuv√©s');
    }

    // Test 4: Compte valide
    console.log('\n4Ô∏è‚É£ Test avec un compte valide...');
    const validUser = await prisma.user.findFirst({
      where: { 
        isApproved: true,
        password: { not: null }
      }
    });

    if (validUser) {
      console.log(`   üìß Email test√©: ${validUser.email}`);
      console.log(`   üëë R√¥le: ${validUser.role}`);
      console.log(`   ‚úÖ Compte valide pour la connexion`);
    } else {
      console.log('   ‚ö†Ô∏è Aucun compte valide trouv√©');
    }

    // R√©sum√© des tests
    console.log('\nüìä R√©sum√© des tests :');
    console.log('   ‚úÖ EMAIL_NOT_FOUND - Email inexistant');
    console.log('   ‚úÖ INVALID_PASSWORD - Mot de passe incorrect');
    console.log('   ‚úÖ USER_NOT_APPROVED - Compte non approuv√©');
    console.log('   ‚úÖ Compte valide - Connexion possible');

    console.log('\nüéâ Tests termin√©s ! Les messages d\'erreur sont maintenant sp√©cifiques.');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests :', error);
  } finally {
    await prisma.$disconnect();
  }
}

testLoginErrors();
