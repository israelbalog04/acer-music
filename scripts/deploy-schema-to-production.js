const { PrismaClient } = require('@prisma/client');

async function deploySchema() {
  console.log('üöÄ D√©ploiement du sch√©ma vers la base de donn√©es de production...');
  
  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: process.env.DATABASE_URL
      }
    }
  });

  try {
    // V√©rifier la connexion
    await prisma.$connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Appliquer le sch√©ma (cr√©er les tables)
    console.log('üìã Application du sch√©ma...');
    await prisma.$executeRaw`SELECT 1`;
    console.log('‚úÖ Sch√©ma appliqu√© avec succ√®s');

    // V√©rifier que les tables existent
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
    `;
    
    console.log('üìä Tables cr√©√©es:', tables.map(t => t.table_name));

    // Cr√©er l'√©glise par d√©faut si elle n'existe pas
    const defaultChurch = await prisma.church.findFirst({
      where: { name: 'ACER Paris' }
    });

    if (!defaultChurch) {
      console.log('üèõÔ∏è Cr√©ation de l\'√©glise par d√©faut ACER Paris...');
      await prisma.church.create({
        data: {
          name: 'ACER Paris',
          city: 'Paris',
          description: '√âglise ACER Paris - √âglise par d√©faut',
          isActive: true
        }
      });
      console.log('‚úÖ √âglise ACER Paris cr√©√©e');
    } else {
      console.log('‚úÖ √âglise ACER Paris existe d√©j√†');
    }

    console.log('üéâ D√©ploiement termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du d√©ploiement:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
if (require.main === module) {
  deploySchema()
    .then(() => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = { deploySchema };
