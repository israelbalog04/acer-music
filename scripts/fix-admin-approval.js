const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixAdminApproval() {
  try {
    console.log('üîß V√©rification et correction des admins non approuv√©s...\n');

    // R√©cup√©rer tous les admins
    const admins = await prisma.user.findMany({
      where: { role: 'ADMIN' },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        isApproved: true,
        churchId: true
      }
    });

    console.log(`üìä ${admins.length} admin(s) trouv√©(s)`);

    let fixedCount = 0;
    for (const admin of admins) {
      console.log(`\nüë§ ${admin.email} (${admin.firstName} ${admin.lastName})`);
      console.log(`   isApproved: ${admin.isApproved ? 'OUI' : 'NON'}`);

      if (!admin.isApproved) {
        console.log(`   üîß Correction en cours...`);
        
        await prisma.user.update({
          where: { id: admin.id },
          data: {
            isApproved: true,
            approvedAt: new Date(),
            approvedBy: 'system-auto-fix'
          }
        });

        console.log(`   ‚úÖ Admin corrig√© !`);
        fixedCount++;
      } else {
        console.log(`   ‚úÖ D√©j√† approuv√©`);
      }
    }

    console.log(`\nüéâ Correction termin√©e !`);
    console.log(`   Admins corrig√©s: ${fixedCount}`);

    // V√©rification finale
    const unapprovedAdmins = await prisma.user.count({
      where: {
        role: 'ADMIN',
        isApproved: false
      }
    });

    console.log(`   Admins non approuv√©s restants: ${unapprovedAdmins}`);

    if (unapprovedAdmins === 0) {
      console.log(`\n‚úÖ Tous les admins sont maintenant approuv√©s !`);
    } else {
      console.log(`\n‚ö†Ô∏è Il reste encore ${unapprovedAdmins} admin(s) non approuv√©(s)`);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction :', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixAdminApproval();
